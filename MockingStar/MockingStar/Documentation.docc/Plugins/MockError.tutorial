@Tutorial(time: 2) {
    @Intro(title: "Mock Error Plugin") {
        Customize the error model when a mock is not found.
        
        @Image(source: not_found.png)
    }
    
    @Section(title: "When Mock Request Return Error") {
        @ContentAndMedia {
            Normally, Mocking Star fetches a response from the origin server which it does not have. However, if your request additionally has the `disableLiveData` flag, the mock server can return an error. 
            
            @Image(source: not_found.png)
        }
    }
    
    @Section(title: "Example Use Cases") {
        @ContentAndMedia {
            - Error response for your default response
            - Debugging
            - Placeholder
        }
    }
    
    @Section(title: "Create Mock Error Plugin") {
        @ContentAndMedia {
            You can create a project-based plugin or a mock domain-based plugin; the only change is the file path.
        }
        
        @Steps {
            @Step {
                Create `mockError.js` file at `Plugins` or `/Domains/`*DomainName*`/Plugins`
                
                @Code(name: "mockError.js", file: MockErrorPlugin.js)
            }
            
            @Step {
                Define plugin function.
                
                @Code(name: "mockError.js", file: MockErrorPlugin-empty.js)
            }
            
            @Step {
                Customize your response model. 
                @Code(name: "mockError.js", file: MockErrorPlugin-model.js)
            }
            
            @Step {
                Return model
                
                ðŸš¨ Be sure response type must be string
                @Code(name: "mockError.js", file: MockErrorPlugin-template.js)
            }
        }
    }
}
